apply plugin: 'groovy'
apply plugin: 'eclipse'

group = 'com.oksijen.lbs'
version = '1.0'

logging.captureStandardOutput LogLevel.INFO

// define how the dependencies are resolved
repositories {
    mavenLocal()
    mavenCentral()
}

// define runtime / classpath configurations for custom sourcesets
configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime

    functionalTestCompile.extendsFrom testCompile
    functionalTestRuntime.extendsFrom testRuntime
}

// define where source files for each configuration is
sourceSets {
	// default, not used, not necessary
    main {
        groovy {
            srcDirs = ['src/main/groovy']
        }
        java {
            srcDirs = ['src/main/java']
        }
    }

    // default, not used, not necessary
    test {
        groovy {
            srcDirs = ['src/test/groovy']
        }
        java {
            srcDirs = ['src/test/java']
        }
    }

    // currently not used
    integrationTest {
        compileClasspath = sourceSets.main.output + configurations.integrationTestCompile
        runtimeClasspath = output + sourceSets.main.output + configurations.integrationTestRuntime

        groovy {
            srcDirs = ['src/integrationTest/groovy']
        }
        java {
            srcDirs = ['src/integrationTest/java']
        }
        resources {
            srcDirs = ['src/integrationTest/resources']
        }
    }

    functionalTest {
        compileClasspath = sourceSets.main.output + configurations.functionalTestCompile
        runtimeClasspath = output + sourceSets.main.output + configurations.functionalTestRuntime

        groovy {
            srcDirs = ['src/functionalTest/groovy']
        }
        java {
            srcDirs = ['src/functionalTest/java']
        }
        resources {
            srcDirs = ['src/functionalTest/resources']
        }
    }
}

// ext. prefix is used for defining custom project properties
// these are the drivers we will use for functional testing
ext.locateUrl = "http://lbas.oksijen.com/lbas20/"
ext.drivers = ['chrome', 'ie']
ext.driverPaths = [
    'chrome' 	: "$projectDir\\driver\\chromedriver.exe",
    'ie'		: "$projectDir\\driver\\IEDriverServer.exe"
]

dependencies {
    def gebVersion = "0.9.2"
    def seleniumVersion = "2.39.0"

    // main project dependencies
    compile 'org.codehaus.groovy:groovy-all:2.1.9'
    compile 'org.apache.poi:poi:3.9'

    // main test dependencies
    testCompile 'junit:junit:4.11'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    
    // geb acceptance test framework
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile "org.gebish:geb-junit4:$gebVersion"

    // selenium core and drivers
    testCompile "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-ie-driver:$seleniumVersion"
    testCompile "com.github.detro.ghostdriver:phantomjsdriver:1.1.0"
    
    // used for custom dependencies which are not in public repositories 
    testCompile fileTree(dir: "$projectDir/libs/", include: '*.jar')
}

// used to generate gradle wrapper script
task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}

// we create a functional test task for each driver defined in ext.drivers property
// those tasks will be triggered by functionaltTes
drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        group = 'verification'
        description = "Runs the Functional Tests for driver $driver"

        // common classpath and dependency for all test tasks
        dependsOn functionalTestClasses
        testClassesDir = sourceSets.functionalTest.output.classesDir
        classpath = sourceSets.functionalTest.runtimeClasspath

        // each driver should have separate reports directory
        def htmlReportDir = "${project.buildDir}/reports/geb/$driver"
        reports {
            html.destination = file("${htmlReportDir}/default")
            junitXml.destination = file("${project.buildDir}/test-results/geb/$driver")
        }

        // setting up geb environment for this driver
        // see GebConfig.groovy for driver specific geb configuration
        systemProperty "geb.env", driver
        systemProperty "geb.build.baseUrl", locateUrl
        // default geb report path
        systemProperty "geb.build.reportsDir", file("${htmlReportDir}/default")        
        // report path of custom spock report extension
        systemProperty "com.athaydes.spockframework.report.outputDir", "${htmlReportDir}/athaydes"
        
        if(driverPaths[driver]) {
            systemProperty "webdriver.${driver}.driver", driverPaths[driver]
        }
    }
}

// there are not unit-tests here, provided as an example
test {
    forkEvery = 4
    maxParallelForks = Runtime.runtime.availableProcessors() / 2

    reports {
        html.destination = file("${project.buildDir}/reports/unitTests")
        junitXml.destination = file("${project.buildDir}/test-results/unitTests")
    }
}

// there are not integration-tests here, provided as an example
task integrationTest(type: Test) {
    group = 'verification'
    description = 'Runs the Integration Tests'

    forkEvery = 4
    maxParallelForks = Runtime.runtime.availableProcessors() / 2

    dependsOn integrationTestClasses
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath

    reports {
        html.destination = file("${project.buildDir}/reports/integrationTests")
        junitXml.destination = file("${project.buildDir}/test-results/integrationTests")
    }
}

// this task is a composite task that depends on dynamically created driver test tasks
task functionalTest(type: Test) {
    group = 'verification'
    description = 'Runs the Functional Tests'

    forkEvery = 4
    maxParallelForks = Runtime.runtime.availableProcessors() / 2

    // depend on dynamically generated driver test tasks
    dependsOn drivers.collect { tasks["${it}Test"] }
    
    // tests are actually run by driver test tasks, this task itself is disabled
    enabled = false
}

// configure logging for test tasks
tasks.withType(Test) {
    testLogging.showStandardStreams = true
    testLogging.showExceptions = true
    testLogging.exceptionFormat 'full'
}

// added to test ExcelBuilder with main method, can be removed
task execute(type:JavaExec) {
	dependsOn functionalTestClasses
	main = 'com.oksijen.lbs.lbas.functest.util.ExcelBuilder'
	classpath = sourceSets.functionalTest.runtimeClasspath
}

// when build is run, the tasks listed here are executed
check {
    dependsOn = [test, integrationTest, functionalTest]
}