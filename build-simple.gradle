apply plugin: 'groovy'
apply plugin: 'eclipse'

group = 'com.oksijen.lbs'
version = '1.0'

repositories {
    mavenLocal()
    mavenCentral()
}

// these are the drivers we will use for functional testing
ext.drivers = ["chrome", "ie"]
ext.driverPaths = [
    'chrome' : "$projectDir\\driver\\chromedriver.exe",
    'ie' : "$projectDir\\driver\\IEDriverServer.exe"
]

dependencies {
    def gebVersion = "0.9.2"
    def seleniumVersion = "2.39.0"

    compile 'org.codehaus.groovy:groovy-all:2.1.9'

    testCompile 'junit:junit:4.11'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    testCompile "org.hamcrest:hamcrest-all:1.3"

    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile "org.gebish:geb-junit4:$gebVersion"

    testCompile "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-ie-driver:$seleniumVersion"
    testCompile "com.github.detro.ghostdriver:phantomjsdriver:1.1.0"
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}

// we create a functional test task for each driver
// defined in ext.drivers property
drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        group = 'verification'
        description = "Runs the Functional Tests for driver $driver"

        // common classpath and dependency for all test tasks
        dependsOn testClasses
        testClassesDir = sourceSets.test.output.classesDir
        classpath = sourceSets.test.runtimeClasspath

        // each driver should have separate reports directory
        reports {
            html.destination = file("${project.buildDir}/reports/geb/$driver")
            junitXml.destination = file("${project.buildDir}/test-results/geb/$driver")
        }

        // setting up geb environment for this driver
        systemProperty "geb.build.reportsDir", file("${project.buildDir}/reports/geb/$driver")
        systemProperty "geb.env", driver
        systemProperty "geb.build.baseUrl", "http://lbas.oksijen.com/lbas20/"
        if(driverPaths[driver]) {
            systemProperty "webdriver.${driver}.driver", driverPaths[driver]
        }
    }
}

test {
    forkEvery = 4
    maxParallelForks = Runtime.runtime.availableProcessors() / 2
    
    dependsOn drivers.collect { tasks["${it}Test"] }
    enabled = false

    reports {
        html.destination = file("${project.buildDir}/reports/functionalTests")
        junitXml.destination = file("${project.buildDir}/test-results/functionalTests")
    }
}

tasks.withType(Test) {
    testLogging.showStandardStreams = true
    testLogging.showExceptions = true
    testLogging.exceptionFormat 'full'
}

check {
    dependsOn = [test]
}
